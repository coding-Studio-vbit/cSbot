"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _qs = require("qs");

var _qs2 = _interopRequireDefault(_qs);

var _randomstring = require("randomstring");

var _randomstring2 = _interopRequireDefault(_randomstring);

var _request = require("request/request");

var _request2 = _interopRequireDefault(_request);

var _sha = require("crypto-js/sha512");

var _sha2 = _interopRequireDefault(_sha);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Main API class
 */
var CF = function () {
    function CF() {
        _classCallCheck(this, CF);

        //
        // credentials for API call
        //
        this.options = {
            API_URL: "http://codeforces.com/api",
            API_KEY: "",
            API_SECRET: "",
            DEFAULT_TIMEOUT: 60000 //1 minute
        };

        //
        // user method
        //
        this.user = {
            blogEntries: callApi.bind(this, "user.blogEntries"),
            friends: callApi.bind(this, "user.friends"),
            info: callApi.bind(this, "user.info"),
            ratedList: callApi.bind(this, "user.ratedList"),
            rating: callApi.bind(this, "user.rating"),
            status: callApi.bind(this, "user.status")
        };

        //
        // contest method
        //
        this.contest = {
            hacks: callApi.bind(this, "contest.hacks"),
            list: callApi.bind(this, "contest.list"),
            ratingChanges: callApi.bind(this, "contest.ratingChanges"),
            standings: callApi.bind(this, "contest.standings"),
            status: callApi.bind(this, "contest.status")
        };

        //
        // all problemset method
        //
        this.problemset = {
            problems: callApi.bind(this, "problemset.problems"),
            recentStatus: callApi.bind(this, "problemset.recentStatus")
        };

        //
        // blog method
        //
        this.blogEntry = {
            comments: callApi.bind(this, "blogEntry.comments"),
            view: callApi.bind(this, "blogEntry.view")
        };

        //
        // recent news method
        //
        this.recentActions = callApi.bind(this, "recentActions");
    }

    /**
     * @param {string} API_KEY - user API key
     * @param {string} API_SECRET - user API secret
     */


    _createClass(CF, [{
        key: "setApis",
        value: function setApis() {
            var API_KEY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var API_SECRET = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            this.options.API_KEY = API_KEY;
            this.options.API_SECRET = API_SECRET;
        }
    }]);

    return CF;
}();

/**
 * Send request to api
 *
 * @param {string} method - method of API request.
 * @param {object} parameters - API url parameters
 * @param {function} callback
 * @returns {*}
 */


function callApi(method, parameters, callback) {

    if (typeof parameters === 'undefined') {
        throw new Error('undefined is not a valid parameters object.');
    }

    if ((typeof parameters === "undefined" ? "undefined" : _typeof(parameters)) !== 'object') {
        throw new Error('valid parameters object required.');
    }

    var opts = this.options;

    var noCallback = !callback || typeof callback !== 'function';
    var noApiKey = typeof opts.API_KEY !== 'string' || opts.API_KEY.length === 0 || typeof opts.API_SECRET !== 'string' || opts.API_SECRET.length === 0;
    if (noApiKey) {
        if (noCallback) {
            throw new Error('API key and API secret required.');
        }
        return callback(new Error("API key and API secret required."));
    }

    opts.method = method;

    //
    // final API url with hashes
    //
    var url = makeApiUrl(opts, parameters);

    var reqOptions = {
        uri: url,
        json: true,
        timeout: process.env.CF_TIMEOUT || opts.DEFAULT_TIMEOUT
    };

    //
    // callback not exists, just return the request modules Request class instance for event
    //
    if (noCallback) {
        return new _request2.default(reqOptions);
    }

    //
    // callback exists, return Request for streaming and handle callback for error handling and custom formatted data
    //
    return callRequest(reqOptions, handleCallback.bind(null, callback));
}

/**
 * Handle user callback
 *
 * @param callback - user callback
 * @param err - request errors
 * @param httpResponse - request HTTP response
 * @param body - request response body
 * @returns {*}
 */
function handleCallback(callback, err, httpResponse, body) {

    if (err) {
        return callback(err);
    }

    //
    // API returns error
    //
    if (body.status !== 'OK') {
        return callback(new Error(body.comment));
    }

    return callback(null, body.result);
}

/**
 * Call request modules main class instead of base function
 * @param options
 * @param callback
 * @returns {Request}
 */
function callRequest(options, callback) {
    options.callback = callback;
    return new _request2.default(options);
}

/**
 * Generate API url according to CF API rules
 *
 * @param {array} options - main class options
 * @param {array} parameters - API url parameters [see doc]
 * @returns {string} - final url
 */
function makeApiUrl(options, parameters) {

    var query = parameters;

    //
    // If any parameter given in array, make it string separated by semicolon(;)
    //
    for (var key in query) {
        if (_.isArray(query[key])) {
            query[key] = _.join(query[key], ';');
        }
    }

    var curTime = Math.floor(Date.now() / 1000);
    var randomToken = _randomstring2.default.generate(6);

    query.time = curTime;
    query.apiKey = options.API_KEY;

    //
    // Sort parameters according to codeforces API rules
    //
    query = _.chain(query).map(function (value, key) {
        return { key: key, value: value };
    }).orderBy(['key', 'value'], ['desc', 'desc']).reverse().keyBy('key').mapValues('value').value();

    var qsFy = _qs2.default.stringify(query, { encode: false });
    var apiSig = randomToken + "/" + options.method + "?" + qsFy + "#" + options.API_SECRET;

    apiSig = (0, _sha2.default)(apiSig).toString();
    query.apiSig = randomToken + apiSig;
    qsFy = _qs2.default.stringify(query, { encode: false });

    var url = options.API_URL + "/" + options.method + "?" + qsFy;

    return url;
}

var Codeforces = new CF();
exports.default = Codeforces;

module.exports = Codeforces;